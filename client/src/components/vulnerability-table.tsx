import { useState } from "react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { ExternalLink, Edit, Check, Github, GitBranch } from "lucide-react";
import VulnerabilityDetail from "./vulnerability-detail";

interface Vulnerability {
  id: string;
  title: string;
  description: string;
  severity: "critical" | "high" | "medium" | "low" | "info";
  status: "new" | "reviewing" | "fixed" | "false_positive" | "ignored";
  filePath: string;
  startLine?: number;
  endLine?: number;
  cveId?: string;
  repository?: {
    name: string;
    provider: string;
  };
  detectedBy: string;
  pqcCategory?: string;
}

interface VulnerabilityTableProps {
  vulnerabilities?: Vulnerability[];
  showRepository?: boolean;
  limit?: number;
}

export default function VulnerabilityTable({ 
  vulnerabilities = [], 
  showRepository = true,
  limit 
}: VulnerabilityTableProps) {
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null);
  const queryClient = useQueryClient();

  const updateStatusMutation = useMutation({
    mutationFn: async ({ id, status }: { id: string; status: string }) => {
      return await apiRequest("PATCH", `/api/vulnerabilities/${id}`, { status });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/vulnerabilities"] });
    }
  });

  const displayedVulnerabilities = limit ? vulnerabilities.slice(0, limit) : vulnerabilities;

  if (vulnerabilities.length === 0) {
    return (
      <div className="text-center py-8 text-muted-foreground">
        <p>No vulnerabilities found</p>
      </div>
    );
  }

  const getSeverityBadge = (severity: string) => {
    const variants = {
      critical: "bg-red-100 text-red-800",
      high: "bg-orange-100 text-orange-800", 
      medium: "bg-yellow-100 text-yellow-800",
      low: "bg-blue-100 text-blue-800",
      info: "bg-gray-100 text-gray-800"
    };
    return (
      <Badge className={variants[severity as keyof typeof variants] || variants.medium}>
        {severity.charAt(0).toUpperCase() + severity.slice(1)}
      </Badge>
    );
  };

  const getStatusBadge = (status: string) => {
    const variants = {
      new: "bg-yellow-100 text-yellow-800",
      reviewing: "bg-blue-100 text-blue-800",
      fixed: "bg-green-100 text-green-800",
      false_positive: "bg-gray-100 text-gray-800",
      ignored: "bg-gray-100 text-gray-800"
    };
    
    const labels = {
      new: "New",
      reviewing: "Reviewing", 
      fixed: "Fixed",
      false_positive: "False Positive",
      ignored: "Ignored"
    };

    return (
      <Badge className={variants[status as keyof typeof variants] || variants.new}>
        {labels[status as keyof typeof labels] || status}
      </Badge>
    );
  };

  return (
    <>
      <div className="overflow-x-auto">
        <Table>
          <TableHeader>
            <TableRow>
              {showRepository && (
                <TableHead>Repository</TableHead>
              )}
              <TableHead>Vulnerability</TableHead>
              <TableHead>Severity</TableHead>
              <TableHead>File</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {displayedVulnerabilities.map((vulnerability) => (
              <TableRow key={vulnerability.id} data-testid={`vulnerability-row-${vulnerability.id}`}>
                {showRepository && (
                  <TableCell>
                    <div className="flex items-center space-x-2">
                      {vulnerability.repository?.provider === "github" && (
                        <Github className="h-4 w-4 text-muted-foreground" />
                      )}
                      {vulnerability.repository?.provider === "gitlab" && (
                        <GitBranch className="h-4 w-4 text-muted-foreground" />
                      )}
                      <span className="text-sm font-medium" data-testid={`text-repository-${vulnerability.id}`}>
                        {vulnerability.repository?.name || "Unknown"}
                      </span>
                    </div>
                  </TableCell>
                )}
                <TableCell>
                  <div>
                    <div className="text-sm font-medium text-foreground" data-testid={`text-vulnerability-title-${vulnerability.id}`}>
                      {vulnerability.title}
                    </div>
                    {vulnerability.cveId && (
                      <div className="text-sm text-muted-foreground" data-testid={`text-cve-${vulnerability.id}`}>
                        {vulnerability.cveId}
                      </div>
                    )}
                  </div>
                </TableCell>
                <TableCell data-testid={`badge-severity-${vulnerability.id}`}>
                  {getSeverityBadge(vulnerability.severity)}
                </TableCell>
                <TableCell>
                  <div className="font-mono text-sm text-foreground" data-testid={`text-file-path-${vulnerability.id}`}>
                    {vulnerability.filePath}
                  </div>
                  {vulnerability.startLine && (
                    <div className="text-sm text-muted-foreground" data-testid={`text-line-number-${vulnerability.id}`}>
                      Line {vulnerability.startLine}
                    </div>
                  )}
                </TableCell>
                <TableCell data-testid={`badge-status-${vulnerability.id}`}>
                  {getStatusBadge(vulnerability.status)}
                </TableCell>
                <TableCell>
                  <div className="flex items-center space-x-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setSelectedVulnerability(vulnerability)}
                      data-testid={`button-view-details-${vulnerability.id}`}
                    >
                      <ExternalLink className="h-4 w-4" />
                    </Button>
                    {vulnerability.status !== "fixed" && (
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => updateStatusMutation.mutate({ 
                          id: vulnerability.id, 
                          status: "fixed" 
                        })}
                        data-testid={`button-mark-fixed-${vulnerability.id}`}
                      >
                        <Check className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>

      {selectedVulnerability && (
        <VulnerabilityDetail
          vulnerability={selectedVulnerability}
          isOpen={!!selectedVulnerability}
          onClose={() => setSelectedVulnerability(null)}
        />
      )}
    </>
  );
}
