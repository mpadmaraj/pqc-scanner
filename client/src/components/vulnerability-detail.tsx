import { useState } from "react";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import type { Vulnerability } from "@shared/schema";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { ScrollArea } from "@/components/ui/scroll-area";
import { ExternalLink, Download, Check, Lightbulb, Shield } from "lucide-react";

interface VulnerabilityDetailProps {
  vulnerability: Vulnerability & {
    repository?: {
      name: string;
      provider: string;
    };
  };
  isOpen: boolean;
  onClose: () => void;
}

export default function VulnerabilityDetail({ 
  vulnerability, 
  isOpen, 
  onClose 
}: VulnerabilityDetailProps) {
  const [workaround, setWorkaround] = useState("");
  const queryClient = useQueryClient();

  const { data: fileContent } = useQuery<{ content?: string }>({
    queryKey: ["/api/file-content", vulnerability.repositoryId, vulnerability.filePath, vulnerability.startLine, vulnerability.endLine],
    enabled: isOpen && !!vulnerability.repositoryId,
  });

  const { data: vdrReport } = useQuery<{ vexStatus?: string }>({
    queryKey: ["/api/vdr", vulnerability.id],
    enabled: isOpen,
  });

  const updateStatusMutation = useMutation({
    mutationFn: async ({ status, workaround }: { status: string; workaround?: string }) => {
      return await apiRequest("PATCH", `/api/vulnerabilities/${vulnerability.id}`, { 
        status, 
        workaround 
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/vulnerabilities"] });
      onClose();
    }
  });

  const generateVdrMutation = useMutation({
    mutationFn: async () => {
      return await apiRequest("POST", `/api/vdr/${vulnerability.id}/generate`, {});
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/vdr", vulnerability.id] });
    }
  });

  const getSeverityColor = (severity: string) => {
    const colors = {
      critical: "text-red-600 bg-red-50 border-red-200",
      high: "text-orange-600 bg-orange-50 border-orange-200",
      medium: "text-yellow-600 bg-yellow-50 border-yellow-200",
      low: "text-blue-600 bg-blue-50 border-blue-200",
      info: "text-gray-600 bg-gray-50 border-gray-200"
    };
    return colors[severity as keyof typeof colors] || colors.medium;
  };

  const getPQCRecommendation = (algorithm?: string) => {
    const recommendations: Record<string, string> = {
      "RSA": `# Quantum-safe alternative using ML-KEM (FIPS 203)
from pqcrypto.kem.kyber1024 import generate_keypair, encrypt, decrypt

# Generate quantum-safe key pair
public_key, secret_key = generate_keypair()
# Use ML-KEM encryption instead of RSA`,
      "ECDSA": `# Migrate to ML-DSA (CRYSTALS-Dilithium)
from pqcrypto.sign.dilithium5 import generate_keypair, sign, verify

# Generate quantum-safe signing keys
public_key, secret_key = generate_keypair()
signature = sign(message, secret_key)`,
      "DES": `# Replace with AES-256 and plan PQC migration
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

# Use AES-256 (quantum-resistant for now)
key = urandom(32)  # 256-bit key
cipher = Cipher(algorithms.AES(key), modes.GCM(nonce))`,
    };
    
    return recommendations[algorithm || ""] || 
           "// Consider migrating to NIST-approved post-quantum algorithms";
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh]">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <Shield className="h-5 w-5 text-red-600" />
            <span data-testid="text-vulnerability-detail-title">{vulnerability.title}</span>
          </DialogTitle>
          <DialogDescription>
            Detailed vulnerability analysis and remediation guidance
          </DialogDescription>
        </DialogHeader>

        <ScrollArea className="max-h-[70vh]">
          <div className="space-y-6">
            {/* Header Info */}
            <div className={`p-6 rounded-lg border ${getSeverityColor(vulnerability.severity)}`}>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <span className="text-sm font-medium text-muted-foreground">File:</span>
                  <span className="ml-2 font-mono text-sm" data-testid="text-file-path">
                    {vulnerability.filePath}
                  </span>
                </div>
                <div>
                  <span className="text-sm font-medium text-muted-foreground">Line:</span>
                  <span className="ml-2 text-sm" data-testid="text-line-range">
                    {vulnerability.startLine ?? 'N/A'}
                    {vulnerability.endLine && vulnerability.endLine !== vulnerability.startLine 
                      ? `-${vulnerability.endLine}` 
                      : ''
                    }
                  </span>
                </div>
                {vulnerability.cveId && (
                  <div>
                    <span className="text-sm font-medium text-muted-foreground">CVE:</span>
                    <span className="ml-2 text-sm" data-testid="text-cve-id">{vulnerability.cveId}</span>
                  </div>
                )}
                {vulnerability.cvssScore && (
                  <div>
                    <span className="text-sm font-medium text-muted-foreground">CVSS Score:</span>
                    <span className="ml-2 text-sm font-medium text-red-600" data-testid="text-cvss-score">
                      {vulnerability.cvssScore}
                    </span>
                  </div>
                )}
              </div>

              {vulnerability.metadata && (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                  {vulnerability.metadata.algorithm && (
                    <div>
                      <span className="text-sm font-medium text-muted-foreground">Algorithm:</span>
                      <span className="ml-2 text-sm" data-testid="text-algorithm">
                        {vulnerability.metadata.algorithm}
                      </span>
                    </div>
                  )}
                  {vulnerability.metadata.keySize && (
                    <div>
                      <span className="text-sm font-medium text-muted-foreground">Key Size:</span>
                      <span className="ml-2 text-sm" data-testid="text-key-size">
                        {vulnerability.metadata.keySize} bits
                      </span>
                    </div>
                  )}
                </div>
              )}

              <p className="text-sm" data-testid="text-vulnerability-description">
                {vulnerability.description}
              </p>
            </div>

            {/* Code Snippet */}
            {(vulnerability.codeSnippet || fileContent?.content) && (
              <div className="bg-muted rounded-lg p-4">
                <h5 className="text-sm font-medium mb-2">Vulnerable Code:</h5>
                <pre className="text-sm font-mono bg-background p-3 rounded overflow-x-auto">
                  <code data-testid="text-code-snippet">
                    {vulnerability.codeSnippet || fileContent?.content}
                  </code>
                </pre>
              </div>
            )}

            {/* Recommendation */}
            {vulnerability.recommendation && (
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <h5 className="text-sm font-medium text-foreground mb-2 flex items-center">
                  <Lightbulb className="h-4 w-4 text-green-600 mr-2" />
                  Recommended Solution:
                </h5>
                <p className="text-sm text-foreground mb-3" data-testid="text-recommendation">
                  {vulnerability.recommendation}
                </p>
                <pre className="text-sm font-mono bg-white p-3 rounded border">
                  <code data-testid="text-solution-code">
                    {getPQCRecommendation(vulnerability.metadata?.algorithm)}
                  </code>
                </pre>
              </div>
            )}

            {/* Workaround */}
            {vulnerability.workaround && (
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <h5 className="text-sm font-medium text-foreground mb-2">Current Workaround:</h5>
                <p className="text-sm text-foreground" data-testid="text-workaround">
                  {vulnerability.workaround}
                </p>
              </div>
            )}

            {/* Add Workaround */}
            {vulnerability.status === "reviewing" && (
              <div className="space-y-3">
                <label className="text-sm font-medium text-foreground">
                  Add Temporary Workaround:
                </label>
                <Textarea
                  value={workaround}
                  onChange={(e) => setWorkaround(e.target.value)}
                  placeholder="Describe temporary mitigation steps..."
                  className="min-h-[100px]"
                  data-testid="textarea-workaround"
                />
              </div>
            )}

            {/* VDR Report Status */}
            {vdrReport && (
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <h5 className="text-sm font-medium text-foreground mb-2">
                  Vulnerability Disclosure Report (VDR):
                </h5>
                <p className="text-sm text-muted-foreground mb-2">
                  VEX Status: <Badge>{vdrReport.vexStatus ?? 'Unknown'}</Badge>
                </p>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => window.open(`/api/vdr/${vulnerability.id}`, '_blank')}
                  data-testid="button-view-vdr"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Download VDR
                </Button>
              </div>
            )}

            {/* Actions */}
            <div className="flex items-center space-x-3 pt-4 border-t">
              <Button
                variant="outline"
                onClick={() => window.open(`/editor?file=${vulnerability.filePath}&line=${vulnerability.startLine ?? 1}`, '_blank')}
                data-testid="button-open-editor"
              >
                <ExternalLink className="h-4 w-4 mr-2" />
                Open in Editor
              </Button>
              
              {!vdrReport && (
                <Button
                  variant="outline"
                  onClick={() => generateVdrMutation.mutate()}
                  disabled={generateVdrMutation.isPending}
                  data-testid="button-generate-vdr"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Generate VDR Report
                </Button>
              )}

              {vulnerability.status !== "fixed" && (
                <Button
                  onClick={() => updateStatusMutation.mutate({ 
                    status: "fixed", 
                    workaround: workaround || undefined 
                  })}
                  disabled={updateStatusMutation.isPending}
                  data-testid="button-mark-fixed"
                >
                  <Check className="h-4 w-4 mr-2" />
                  Mark Fixed
                </Button>
              )}
            </div>
          </div>
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
}
