# Docker Compose for PQC Vulnerability Scanner
# Deploy on AWS ECS, Digital Ocean, or any Docker-compatible platform
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: pqc_scanner
      POSTGRES_USER: pqc_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_pqc_password_2024}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pqc_user -d pqc_scanner"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # PQC Scanner Application
  pqc-scanner:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://pqc_user:${POSTGRES_PASSWORD:-secure_pqc_password_2024}@postgres:5432/pqc_scanner
      PGHOST: postgres
      PGPORT: 5432
      PGUSER: pqc_user
      PGPASSWORD: ${POSTGRES_PASSWORD:-secure_pqc_password_2024}
      PGDATABASE: pqc_scanner
      
      # Application Configuration
      NODE_ENV: production
      PORT: 5000
      
      # Security
      SESSION_SECRET: ${SESSION_SECRET:-your_super_secure_session_secret_2024}
      
      # Optional: External API Keys (add as needed)
      # GITHUB_TOKEN: ${GITHUB_TOKEN}
      # SONARQUBE_TOKEN: ${SONARQUBE_TOKEN}
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - pqc-scanner
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  app_logs:
    driver: local

networks:
  default:
    driver: bridge